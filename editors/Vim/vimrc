"            _
"     __   _(_)_ __ ___  _ __ ___
"     \ \ / / | '_ ` _ \| '__/ __|
"    _ \ V /| | | | | | | | | (__
"   (_) \_/ |_|_| |_| |_|_|  \___|
"
"
" Author: Richard de Wit
" Repo:   https://github.com/richarddewit/dotfiles/vim/vimrc


" Setup vim-plug  ----------------------------------------------------------{{{
  " Plugins will be downloaded under the specified directory.
  call plug#begin('~/.vim/plugged')

" }}}

" Packages  ----------------------------------------------------------------{{{
" Colorscheme & visual stuff
  Plug 'morhetz/gruvbox'
  Plug 'Yggdroot/indentLine'
  Plug 'Raimondi/delimitMate'
  Plug 'valloric/MatchTagAlways'
  " Plug 'vim-airline/vim-airline-themes'
  " Plug 'vim-airline/vim-airline'
  Plug 'itchyny/lightline.vim'
  Plug 'shinchu/lightline-gruvbox.vim'
  Plug 'equalsraf/neovim-gui-shim'
  Plug 'machakann/vim-highlightedyank'


" VSC
  Plug 'tpope/vim-fugitive'
  Plug 'mhinz/vim-signify'


" Languages
" HTML
  Plug 'mattn/emmet-vim'
" JavaScript
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'moll/vim-node'
  Plug 'posva/vim-vue', { 'for': 'vue' }
" CSS
  Plug 'csscomb/vim-csscomb'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss', 'sass', 'vue'] }
  Plug 'gorodinskiy/vim-coloresque'
" Python
  Plug 'fisadev/vim-isort', { 'for': 'python' }
  Plug 'davidhalter/jedi-vim', { 'for': 'python' }
  Plug 'klen/python-mode', { 'for': 'python' }
" PHP
  Plug 'StanAngeloff/php.vim', { 'for': 'php' }
  Plug 'arnaud-lb/vim-php-namespace', { 'for': 'php' }
  Plug 'stephpy/vim-php-cs-fixer', { 'for': 'php' }
  Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
  Plug 'jwalton512/vim-blade', { 'for': 'blade' }
  Plug 'lumiliet/vim-twig', { 'for': 'twig' }
" Other
  Plug 'chr4/nginx.vim'
  Plug 'tpope/vim-markdown'


" Utils
  Plug 'editorconfig/editorconfig-vim'
  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'mhinz/vim-startify'
  Plug '/usr/bin/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'tomtom/tcomment_vim'
  Plug 'terryma/vim-expand-region'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'

  " List ends here. Plugins become visible to Vim after this call.
  call plug#end()

" }}}

" System Settings  ---------------------------------------------------------{{{

  set nocompatible " Silly arrow keys
  set clipboard+=unnamedplus

" Search with smartcase
" /copyright      Case insensitive
" /Copyright      Case sensitive
" /copyright\C    Case sensitive
" /Copyright\c    Case insensitive
  set ignorecase " smartcase needs ignorecase
  set smartcase

  set title
  set encoding=utf-8
  setglobal fileencoding=utf-8
" Currently needed for neovim paste issue
  set pastetoggle=<f6>
" Let airline tell me my status
  set noshowmode
  set noswapfile
  filetype on
  " set relativenumber number
  set tabstop=2 shiftwidth=2 expandtab
  set conceallevel=0
" Block select not limited by shortest line
  set virtualedit=
  set wildmenu
  set laststatus=2
  set wrap linebreak nolist
  set wildmode=full
  set wildignore+=*/tmp/*,*.so,*.swp,*.pyc,*.zip
" Leader is \ (actually is SPC)
  let mapleader = '\'
  let gmapleader = '\'
  map <Space> <leader>
  set undofile
  set undodir="$HOME/.VIM_UNDO_FILES"
  set backupdir=~/.backups,~/.tmp,~/tmp,/var/tmp,/tmp

  set list
  set listchars=tab:▸\ ,space:•,trail:•,extends:»,precedes:«
  set colorcolumn=80

" IndentLines
  let g:indentLine_char = '▏'
  let g:indentLine_enabled = 1
  let g:indentLine_color_term = 240
  autocmd VimEnter * IndentLinesEnable

" Disable delay after Esc is pressed
  set timeoutlen=1000 ttimeoutlen=10

  set cursorline
  autocmd WinLeave * setlocal nocursorline
  autocmd WinEnter * setlocal cursorline

  set backspace=indent,eol,start

" Remember cursor position between vim sessions
  autocmd BufReadPost *
              \ if line("'\"") > 0 && line ("'\"") <= line("$") |
              \   exe "normal! g'\"" |
              \ endif
              " center buffer around cursor when opening files
  autocmd BufRead * normal zz

  let g:jsx_ext_required = 1
  set complete=.,w,b,u,t,k
  let g:gitgutter_max_signs = 1000  " default value
  set guifont=Hack:h12
  set scrolloff=20

" }}}

" Keymap  ------------------------------------------------------------------{{{

  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l

" Disable arrow keys
  noremap <Up> <NOP>
  noremap <Down> <NOP>
  noremap <Left> <NOP>
  noremap <Right> <NOP>

  nnoremap OA <NOP>
  nnoremap OB <NOP>
  nnoremap OC <NOP>
  nnoremap OD <NOP>

  map <Esc> :noh<Cr>
  noremap <C-/> :TComment<Cr>
  noremap <Leader>; :TComment<Cr>

  " Faster save
  nnoremap <Leader>fs :w<CR>
  nnoremap <Leader>qq :q<CR>

  " Save as sudo
  cmap w!! w !sudo tee > /dev/null %

" Copy to clipboard
  vmap <Leader>y "+y
  vmap <Leader>d "+d
  nmap <Leader>p "+p
  nmap <Leader>P "+P
  vmap <Leader>p "+p
  vmap <Leader>P "+P

  if !exists('##TextYankPost')
    map y <Plug>(highlightedyank)
  endif

" Indent and keep selection
  vmap < <gv
  vmap > >gv

  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)

  nnoremap <F3> :<C-u>GundoToggle<CR>

" vim-unimpaired
  nmap <C-up> [e
  nmap <C-down> ]e
  vmap <C-up> [egv
  vmap <C-down> ]egv

" emmet-vim
  imap <expr> <Tab> emmet#expandAbbrIntelligent("\<Tab>")

" PHP
  function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
  endfunction
  autocmd FileType php inoremap <Leader>mu <Esc>:call IPhpInsertUse()<CR>
  autocmd FileType php noremap <Leader>mu :call PhpInsertUse()<CR>

  function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
  endfunction
  autocmd FileType php inoremap <Leader>me <Esc>:call IPhpExpandClass()<CR>
  autocmd FileType php noremap <Leader>me :call PhpExpandClass()<CR>
" }}}

" Themes, Commands, etc  ---------------------------------------------------{{{
" Theme
  set t_Co=256
  syntax enable
  colorscheme gruvbox
  set background=dark
" highlightt the current line number
  hi CursorLineNR guifg=#ffffff
" no need to fold things in markdown all the time
  let g:vim_markdown_folding_disabled = 1
" turn on spelling for markdown files
  autocmd BufRead,BufNewFile *.md setlocal spell complete+=kspell
" highlight bad words in red
  hi SpellBad guibg=#ff2929 guifg=#ffffff" ctermbg=224

  autocmd BufWritePre * :%s/\s\+$//e
" Write on focus lost, buffer change, etc
  au FocusLost * silent! :wa
  set autowriteall
"}}}

" Lightline  ---------------------------------------------------------------{{{
  let g:lightline = {
        \ 'colorscheme': 'gruvbox',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \ },
        \ }

  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction

  function! LightlineFugitive() abort
    if &filetype ==# 'help'
      return ''
    endif
    if has_key(b:, 'lightline_fugitive') && reltimestr(reltime(b:lightline_fugitive_)) =~# '^\s*0\.[0-5]'
      return b:lightline_fugitive
    endif
    try
      if exists('*fugitive#head')
        let head = fugitive#head()
      else
        return ''
      endif
      let b:lightline_fugitive = head
      let b:lightline_fugitive_ = reltime()
      return b:lightline_fugitive
    catch
    endtry
    return ''
  endfunction

  " let g:airline_powerline_fonts = 0
  " let g:airline_theme = 'gruvbox'
  " let g:airline#extensions#tabline#fnamemod = ':t'
  " let g:airline#extensions#tabline#enabled = 1
  " set hidden
  " let g:airline#extensions#tabline#show_tab_nr = 1

" Tabline part of vim-airline
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
  cnoreabbrev <expr> x getcmdtype() == ":" && getcmdline() == 'x' ? 'Sayonara' : 'x'
" cmap x Sayonara

" This replaes :tabnew which I used to bind to this mapping
  nmap <leader>t :term<Cr>
" Move to the next buffer
  nmap <leader>, :bnext<CR>
  nmap <leader><Tab> :bnext<CR>
  nmap <leader>bd :bdelete<CR>
" Move to the previous buffer
  nmap <leader>. :bprevious<CR>
  nmap <leader><S-Tab> :bprevious<CR>
  " let g:airline#extensions#tabline#buffer_idx_mode = 1
  "
  " nmap <leader>1 <Plug>AirlineSelectTab1
  " nmap <leader>2 <Plug>AirlineSelectTab2
  " nmap <leader>3 <Plug>AirlineSelectTab3
  " nmap <leader>4 <Plug>AirlineSelectTab4
  " nmap <leader>5 <Plug>AirlineSelectTab5
  " nmap <leader>6 <Plug>AirlineSelectTab6
  " nmap <leader>7 <Plug>AirlineSelectTab7
  " nmap <leader>8 <Plug>AirlineSelectTab8
  " nmap <leader>9 <Plug>AirlineSelectTab9

"}}}

" Python  ------------------------------------------------------------------{{{
" python-mode
  let g:version=0
  let g:pymode_folding=0
" jedi-vim
  let g:jedi#popup_on_dot=0
  let g:jedi#use_tabs_not_buffers=0

" }}}

" PHP  ---------------------------------------------------------------------{{{
  let g:blade_custom_directives = ['php']
  let g:blade_custom_directives_pairs = {
        \   'auth': 'endauth',
        \   'guest': 'endguest',
        \   'php': 'endphp',
        \   'isset': 'endisset',
        \   'empty': 'endempty',
        \ }
" }}}

" FZF ----------------------------------------------------------------------{{{

" Install: https://github.com/junegunn/fzf
  let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
  map <C-p> :FZF<CR>
  map <leader>a :Ag<CR>

  vmap <leader>aw y:Ag <C-r>0<CR>
" nmap <leader>aw :Ag <C-r><C-w>
  map <leader>h :History<CR>
  map <leader>l :Lines<CR>

"}}}

" " YouCompleteMe  -----------------------------------------------------------{{{
"
"   let g:ycm_complete_in_comments_and_strings=1
"   let g:ycm_key_list_select_completion=['<Down>']
"   let g:ycm_key_list_previous_completion=['<Up>']
"
" " }}}

" Folding ----------------------------------------------------------------- {{{

" Space to toggle folds.
  nnoremap <Leader><Space> za
  vnoremap <Leader><Space> za

  set foldmethod=marker
  set foldlevelstart=0

  " Make zO recursively open whatever fold we're in, even if it's partially open.
  nnoremap zO zczO

  " "Focus" the current line.  Basically:
  "
  " 1. Close all folds.
  " 2. Open just the folds containing the current line.
  " 3. Move the line to a little bit (15 lines) above the center of the screen.
  " 4. Pulse the cursor line.  My eyes are bad.
  "
  " This mapping wipes out the z mark, which I never use.
  "
  " I use :sus for the rare times I want to actually background Vim.
  nnoremap <C-z> mzzMzvzz15<C-e>`z:Pulse<Cr>

  function! MyFoldText() " {{{
      let line = getline(v:foldstart)

      let nucolwidth = &fdc + &number * &numberwidth
      let windowwidth = winwidth(0) - nucolwidth - 3
      let foldedlinecount = v:foldend - v:foldstart

      " expand tabs into spaces
      let onetab = strpart('          ', 0, &tabstop)
      let line = substitute(line, '\t', onetab, 'g')

      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
      let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
      return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
  endfunction " }}}
  set foldtext=MyFoldText()

" }}}

" Pulse Line  --------------------------------------------------------------{{{

" function! s:Pulse() " {{{
"     redir => old_hi
"         silent execute 'hi CursorLine'
"     redir END
"     let old_hi = split(old_hi, '\n')[0]
"     let old_hi = substitute(old_hi, 'xxx', '', '')
"
"     let steps = 8
"     let width = 1
"     let start = width
"     let end = steps * width
"     let color = 233
"
"     for i in range(start, end, width)
"         execute "hi CursorLine ctermbg=" . (color + i)
"         redraw
"         sleep 6m
"     endfor
"     for i in range(end, start, -1 * width)
"         execute "hi CursorLine ctermbg=" . (color + i)
"         redraw
"         sleep 6m
"     endfor
"
"     execute 'hi ' . old_hi
" endfunction " }}}
" command! -nargs=0 Pulse call s:Pulse()

" }}}

" Cursor settings  ---------------------------------------------------------{{{
if !has("nvim")
  " Switch from block-cursor to vertical-line-cursor when going into/out of insert mode
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  " For Gnome-terminal
  au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
  au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
  au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
  au VimEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
endif
" }}}

" Filetype settings  -------------------------------------------------------{{{

  au BufNewFile,BufRead *.scss set filetype=scss.css
  au BufNewFile,BufRead *.sass set filetype=sass.css
  au BufNewFile,BufRead *.php set filetype=php
  au BufNewFile,BufRead *.module set filetype=php
  au BufNewFile,BufRead *.theme set filetype=php
  au BufNewFile,BufRead *.inc set filetype=php
  au BufNewFile,BufRead *.blade.php set filetype=blade
  au BufNewFile,BufRead /etc/nginx/sites-available/* set filetype=nginx
  au BufNewFile,BufRead /etc/nginx/sites-enabled/* set filetype=nginx

  autocmd Filetype vim setlocal tabstop=2 shiftwidth=2 autoindent
  autocmd Filetype python setlocal tabstop=4 shiftwidth=4
  autocmd Filetype blade setlocal tabstop=4 shiftwidth=4
  autocmd Filetype html setlocal tabstop=2 shiftwidth=2
  autocmd Filetype javascript setlocal tabstop=2 shiftwidth=2
  autocmd Filetype json setlocal tabstop=2 shiftwidth=2
  autocmd Filetype scss setlocal tabstop=2 shiftwidth=2 autoindent
  autocmd Filetype sass setlocal tabstop=2 shiftwidth=2 autoindent
  autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 autoindent

  autocmd FileType sass,scss,css nnoremap <buffer> <F5> :call CSScomb()<CR>
  function! CSScomb()
    execute "silent !csscomb " . expand('%')
    redraw!
  endfunction

" }}}

" Other packages settings  -------------------------------------------------{{{

" editorconfig-vim
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" vim-expand-region
  let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
" vim-signify
  let g:signify_update_on_bufenter=0
" vim-startify
  if !has('nvim')
    set viminfo='100,n$HOME/.vim/files/info/viminfo
  endif
  let g:startify_change_to_vcs_root = 1
  let g:startify_show_sessions = 1
  nnoremap <C-F1> :Startify<Cr>
" ultisnips
  let g:UltiSnipsExpandTrigger="<Tab>"
  let g:UltiSnipsJumpForwardTrigger="<Tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsSnippetsDir='~/.vim/snippets'

  let ignore_list = [
        \ '\.DS_Store',
        \ '\.swp',
        \ '\.swo',
        \ '\.git/',
        \ '\.hg/',
        \ 'git5/.*/review/',
        \ 'google/obj/',
        \ 'tmp/',
        \ '\.vagrant/',
        \ '\.sass-cache/',
        \ '\.ropeproject/',
        \ '\.idea/',
        \ '\.iml',
        \ 'node_modules/',
        \ 'bower_components/',
        \ 'dist/',
        \ '\.git5_specs/',
        \ '\.pyc',
        \ ]

  let g:netrw_list_hide = join(ignore_list, ', ')

" }}}

" GUI settings  ------------------------------------------------------------{{{

  if has('gui_running')
      " GUI Vim

      set guifont=Hack:h9

      " Remove all the UI cruft
      set go-=T
      set go-=l
      set go-=L
      set go-=r
      set go-=R

      highlight SpellBad term=underline gui=undercurl guisp=Orange

      " Different cursors for different modes.
      set guicursor=n-c:block-Cursor-blinkon0
      set guicursor+=v:block-vCursor-blinkon0
      set guicursor+=i-ci:ver20-iCursor

      if has("gui_macvim")
          " Full screen means FULL screen
          set fuoptions=maxvert,maxhorz
      end
  endif

" }}}
